import React, { useEffect, useState, useRef } from 'react';
import "./App.css"
import 'normalize.css';
import "./sliderWithEmoji.css"
import backgroundImage1 from './background/bg1.svg';
import backgroundImage2 from './background/bg2.svg'
import backgroundImage3 from './background/bg3.svg'
import backgroundImage4 from './background/bg4.svg'
import backgroundImage5 from './background/bg5.svg'
import backgroundImage6 from './background/bg6.svg'
import backgroundImage7 from './background/bg7.svg'
import backgroundImage8 from './background/bg8.svg'
import backgroundImage9 from './background/bg9.svg'
import emoji1 from "./emoji/pouting-face.svg"
import emoji2 from "./emoji/unamused-face.svg"
import emoji3 from "./emoji/crying-face.svg"
import emoji4 from "./emoji/confused-face.svg"
import emoji5 from "./emoji/expressionless-face.svg"
import emoji6 from "./emoji/kissing-face.svg"
import emoji7 from "./emoji/happy-face.svg"
import emoji8 from "./emoji/beaming-face-with-smiling-eyes.svg"
import emoji9 from "./emoji/smiling-face-with-smiling-eyes.svg"
import emoji10 from "./emoji/smiling-face-with-heart-eyes.svg"
import finger from './background/finger2.svg'
import saveIcon from './icon/save.svg'
import shareIcon from './icon/share.svg'
import html2canvas from "html2canvas";
import { firestore } from "./firebaseConfig";
import { collection, addDoc } from "firebase/firestore";

const addUser = async (userData) => {
  try {
    // Add a new document with an auto-generated ID
    await addDoc(collection(firestore, "users"), userData);
    console.log("Document successfully written!");
  } catch (error) {
    console.error("Error writing document: ", error);
  }
};

const TopPageMessage = ({ text, onClick }) => {
  return (
    <button className="First-page" onClick={onClick}>
      <div className="FirstBox" >
        <div className='firstpagemessage'>
          {text.split(",").map((line, index) => (
            <div key={index} >{line}</div>
          ))}
        </div>
        <img src={finger} alt="tap finger print" className='fingerPrint' />
      </div>
    </button>)
}

const TopPageMessage2 = ({ text, onClick, showFinger = true }) => {
  return (
    <button className="First-page" onClick={onClick}>
      <div className="FirstBox" >
        <div className='firstpagemessage'>
          <>
            <div>‡∏≠‡∏î‡∏µ‡∏ï‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏∞ ‡πÅ‡∏ï‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠</div>
            <div>
              <span style={{ color: '#9881EA' }}>"‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç"</span>
            </div>
            <div>‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠...</div>
          </>
        </div>
        {showFinger === true ? (<img src={finger} alt="tap finger print" className='fingerPrint' />) : null}
      </div>
    </button>)
}

const TopPageMessage3 = ({ text, onClick }) => {
  return (
    <button className="First-page" onClick={onClick}>
      <div className="Box-2" >
        <div className='message-3'>
          {text.split(",").map((line, index) => (
            <div key={index} >{line}</div>
          ))}
        </div>
        <img src={finger} alt="tap finger print" className='fingerPrint' />
      </div>
    </button>)
}

const AnimateMessage = ({ setPageIndex, setBgIndex }) => {
  const [currentText, setCurrentText] = useState(0); // Track which text to show
  const textList = [
    "‡∏†‡∏≤‡∏û‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏õ‡∏µ‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    "‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ‡∏â‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì,‡∏£‡∏≤‡∏ß‡∏Å‡∏±‡∏ö‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á",
    ""
  ];

  useEffect(() => {
    console.log("current text", currentText)
    if (currentText < textList.length - 1) {
      if (currentText === 1) {
        setBgIndex((prev) => prev + 1)
      }
      const timer = setTimeout(() => {
        setCurrentText((prev) => prev + 1);
      }, 3000); // Delay of 1 second (1000 ms)

      return () => clearTimeout(timer); // Cleanup the timeout
    }
    else {
      setPageIndex((prev) => prev + 1)
    }
  }, [currentText]); // Depend on `currentText`

  return (
    <div className="First-page" >
      <div className="AnimateBox">
        <div className='firstpagemessage'>
          {textList[currentText].split(",").map((line, index) => (
            <div key={index} className='sec'>{line}</div>
          ))}
        </div>
      </div>
    </div>
  );
};

const AnimateMessage2 = ({ pageIndex, setPageIndex }) => {
  const [currentText, setCurrentText] = useState(0); // Track which text to show
  const textList = [
    "‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏±‡∏ô‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏•‡∏∂‡∏Å‡∏°‡∏≤‡∏°‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏∞",
    "‡∏ù‡∏≤‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Instagram: @buildbizth,‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£,‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏û‡∏ß‡∏Å‡πÄ‡∏£‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞",
    ""
  ];

  useEffect(() => {
    if (currentText < textList.length - 1) { // Check if there is more text to show
      const timer = setTimeout(() => {
        setCurrentText((prev) => prev + 1);
      }, 3000); // Delay of 1 second (1000 ms)

      return () => clearTimeout(timer); // Cleanup the timeout
    } else {
      setPageIndex(1)
    }
  }, [currentText]); // Depend on `currentText`

  return (
    <div className="First-page">
      <div className="AnimateBox">
        <div className="finalpagemessage">
          {textList[currentText].split(",").map((line, index) => (
            <div key={index} >
              {line}
            </div>
          ))}
        </div>
      </div>
    </div >

  );
};
const AnimateMessage3 = ({ setPageIndex, setBgIndex, userName }) => {
  const [currentText, setCurrentText] = useState(0); // Track which text to show
  const textList = [
    "‡πÑ‡∏´‡∏ô‡∏î‡∏π‡∏ã‡∏¥ ‡∏Ñ‡∏∏‡∏ì " + userName + " ‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï,‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡∏ô‡∏∞...?",
    "",
    ""
  ];

  useEffect(() => {
    console.log("current text", currentText)
    if (currentText < 2) {
      if (currentText === 1) { setBgIndex(5) }
      const timer = setTimeout(() => {
        setCurrentText((prev) => prev + 1);
      }, 3000); // Delay of 1 second (1000 ms)

      return () => clearTimeout(timer); // Cleanup the timeout
    }
    else {
      setPageIndex((prev) => prev + 1)
    }
  }, [currentText]); // Depend on `currentText`

  return (
    <div className="First-page" >
      <div className="AnimateBox">
        {textList[currentText] !== "" && (<div className='firstpagemessage'>
          {textList[currentText].split(",").map((line, index) => (
            <div key={index} className='sec'>{line}</div>
          ))}
        </div>)}
      </div>
    </div>
  );
};

const RangeSlider = ({ }) => {
  const [answer, setAnswer] = useState("")
  const [score, setScore] = useState(5);
  const emojis = ["üò°", "üò†", "üòï", "üòê", "üôÇ", "üòä", "üòÄ", "üòÑ", "üòÜ", "üòÅ", "ü§©"];
  const emojis_extra = [emoji1, emoji2, emoji3, emoji4, emoji5, emoji6, emoji7, emoji8, emoji9, emoji10];
  const handleSliderChange = (event) => {
    setScore(Number(event.target.value));
  };
  const handleChange = (event) => {
    setAnswer(event.target.value); // Update state when the textarea changes
  };
  return (
    <div className="RatingBox-slider">
      <div className='headtext'>‡∏õ‡∏µ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?</div>
      <div className="score-display">
        <span className="score">{score}</span>
        <span className="emoji">{emojis[score]}</span>
      </div>
      <input
        type="range"
        min="0"
        max="10"
        value={score}
        className="slider"
        onChange={handleSliderChange}
        style={{
          background: `linear-gradient(to right, #8486E6 ${score * 10}%, rgba(173, 154, 238, 0.2) ${score * 10}%)`
        }}
      />
      <textarea
        value={answer}
        onChange={handleChange}
        placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
        className="reason-box"
      ></textarea>
    </div>
  );
}

const ThreeQuestionBox = ({ inputs, setInputs }) => {
  console.log("inputs ...", inputs)
  const handleInputChange = (index, value) => {
    const newInputs = [...inputs]; // Create a copy of the inputs array
    newInputs[index] = value; // Update the specific input value
    setInputs(newInputs); // Update the state
  };

  return (
    <div className="RatingBox-5">
      <div className='headtext'>‡∏°‡∏≤‡∏•‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏™‡∏±‡∏Å 3 ‡∏Ç‡πâ‡∏≠‡∏Å‡∏±‡∏ô</div>
      <div className='questionList'>
        {inputs.map((input, index) => (
          <input
            key={index}
            type="text"
            className="goalInput"
            value={input}
            onChange={(e) => handleInputChange(index, e.target.value)}
            placeholder={`‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà ${index + 1}`}
          />
        ))}
      </div>
    </div>
  );
};

const QuestionBox = ({ text, answer, setAnswer }) => {

  const handleChange = (event) => {
    setAnswer(event.target.value);
  };
  return (
    <div className='RatingBox-3'>
      <div className='headtext'>
        {text.split(",").map((line, index) => (
          <span key={index} className="sec">
            {line}
          </span>
        ))}
      </div>
      <textarea
        value={answer}
        onChange={handleChange}
        placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
        className="reason-box-2"
      ></textarea>
    </div>
  )
}

const QuestionBox2 = ({ text, answer, setAnswer }) => {
  const handleChange = (event) => {
    setAnswer(event.target.value); // Update state when the textarea changes
  };
  return (
    <div className='RatingBox-3'>
      <div className='headtext'>{text.split(",").map((line, index) => (
        <div key={index} className='sec'>{line}</div>
      ))}</div>
      <textarea
        value={answer}
        onChange={handleChange}
        placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
        className="reason-box-2"
      ></textarea>
    </div>
  )
}

const QuestionBox3 = ({ text }) => {
  const [answer, setAnswer] = useState("")
  const handleChange = (event) => {
    setAnswer(event.target.value); // Update state when the textarea changes
  };
  return (
    <div className='RatingBox-3'>
      <div className='headtext'>{text.split(",").map((line, index) => (
        <div key={index} className='sec'>{line}</div>
      ))}</div>
      <textarea
        value={answer}
        onChange={handleChange}
        placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
        className="reason-box-2"
      ></textarea>
    </div>
  )
}

function FirstPage({ setUserName, pageIndex, onClick }) {
  const [user, setUser] = useState("")
  if (pageIndex === 0) {
    return (<TopPageMessage text={"‡∏ô‡∏µ‡πà‡∏Å‡πá‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞"} onClick={onClick} />)
  }
  if (pageIndex === 1) {
    return (
      <div className="Main-box">
        <div className="questionbox-2">
          <div className="messagebox-2">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡∏ô‡∏∞...?</div>
          <input
            type="text"
            className="Username-input"
            value={user}
            onChange={(e) => {
              setUser(e.target.value)
              setUserName(e.target.value)
            }}
            placeholder="‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ß‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£..."
          />
        </div>
        <NextButton handleNextButton={onClick} />
      </div >
    )
  }
  if (pageIndex === 2) {
    return ((<TopPageMessage text={"‡πÄ‡∏≠‡∏≤‡∏•‡πà‡∏∞ " + user + ",‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∂‡∏Å‡∏ñ‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏∞"} onClick={onClick} />))
  }
};

const NextButton = ({ handleNextButton }) => (
  <button className="Next-button" onClick={handleNextButton}>
    ‡πÑ‡∏õ‡∏ï‡πà‡∏≠
  </button>
);

function SecondPage({ text, pageIndex, showComponent, setShowComponent, onClick }) {
  const textList = ["‡∏Ñ‡∏∏‡∏ì‡∏•‡∏∑‡∏°‡∏ï‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏ö‡∏Å‡∏±‡∏ö,‡∏™‡∏°‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏°‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡πÇ‡∏ï‡πä‡∏∞", "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ ‡πÉ‡∏Å‡∏•‡πâ ‡πÉ‡∏Å‡∏•‡πâ ...", "", "‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡∏™‡∏¥..."]
  if ([0, 1].includes(pageIndex)) {
    return (<TopPageMessage text={textList[pageIndex]} onClick={onClick} />)
  }
  if (pageIndex === 2) {
    if (showComponent) {
      return (
        <button className="First-page" onClick={onClick}>
          <div className="FirstBox" >
            <div className='firstpagemessage'>
              <div style={{ display: "flex" }}>
                <div>‡∏™‡∏°‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏°‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ </div>
                <div style={{ color: "#6B56BF" }}> "‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà"</div>
              </div>
              <div>‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏û‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÉ‡∏ô‡∏õ‡∏µ‡∏ô‡∏µ‡πâ</div>
            </div>
            <img src={finger} alt="tap finger print" className='fingerPrint' />
          </div>
        </button>)
    }
  }
  if (pageIndex === 3) {
    return <TopPageMessage text={textList[pageIndex]} onClick={onClick} />
  }
};

function ThirdPage({ text, pageIndex, userName, onClick, setPageIndex, setBgIndex, setAnsetwer }) {
  const textList = ["", "‡∏õ‡∏µ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á...", "‡∏õ‡∏µ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£?", "‡∏õ‡∏µ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ú‡∏¥‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏á‡∏°‡∏±‡πâ‡∏¢?", "‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à‡∏•‡πà‡∏∞?", "‡∏ß‡πâ‡∏≤‡∏ß ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì " + userName + ",‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ô‡∏∞", "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡πÜ‡πÄ‡∏•‡∏¢‡πÅ‡∏´‡∏•‡∏∞,‡πÄ‡∏£‡∏≤‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏•‡∏¢", "‡πÄ‡∏Ñ‡∏¢‡∏Ñ‡∏¥‡∏î‡∏≠‡∏¢‡∏≤‡∏Å‡∏¢‡πâ‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏°‡∏±‡πâ‡∏¢?", "", "‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏ô‡∏∞,‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ", "‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏î‡∏µ‡∏ï ‡∏°‡∏≤‡∏â‡∏∏‡∏î‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÄ‡∏•‡∏¢‡∏ô‡∏∞"]
  const [answerA, setAnswerA] = useState("")
  const [answerB, setAnswerB] = useState("")

  if ([0].includes(pageIndex)) {
    return (<AnimateMessage onClick={onClick} setPageIndex={setPageIndex} setBgIndex={setBgIndex} />)
  }
  if ([1].includes(pageIndex)) {

    return (<ChoiceBox1
      text={textList[pageIndex]}
      onClick={onClick}
    />)
  }
  if ([2].includes(pageIndex)) {
    return (
      <div className='slider-container'>
        <RangeSlider />
        <NextButton handleNextButton={onClick} />
      </div>
    )
  }
  if ([3].includes(pageIndex)) {
    return (
      <div className='questioncontainer'>
        <QuestionBox text={textList[pageIndex]} answer={answerA} setAnswer={setAnswerA} />
        <NextButton handleNextButton={onClick} />
      </div>
    )
  }
  if ([4].includes(pageIndex)) {
    return (
      <div className='questioncontainer'>
        <QuestionBox text={textList[pageIndex]} answer={answerB} setAnswer={setAnswerB} />
        <NextButton handleNextButton={onClick} />
      </div>
    )
  }
  if ([5, 6].includes(pageIndex)) {
    return (<TopPageMessage text={textList[pageIndex]} onClick={onClick} />)
  }
  if ([7].includes(pageIndex)) {
    return (
      <ChoiceBox2
        text={textList[pageIndex]}
        onClick={onClick} />
    )
  }
  if ([8].includes(pageIndex)) {
    return (<TopPageMessage2 text={textList[pageIndex]} onClick={onClick} />)
  }
  if ([9, 10].includes(pageIndex)) {
    return (<TopPageMessage text={textList[pageIndex]} onClick={onClick} />)
  }
};

const TextButton = ({ text, onClick }) => (
  <button className='choiceButton' onClick={onClick}>
    {text}
  </button>
)

const TextButton2 = ({ text, onClick }) => (
  <button className='choiceButton-2' onClick={onClick}>
    {text}
  </button>
)

function ForthPage({ username, pageIndex, inputs, setInputs, onClick, setPageIndex, setBgIndex, setAnswer }) {
  const textList = [
    "",
    "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ñ‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ,‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
    "",
    "‡∏°‡∏±‡∏ô‡∏î‡∏π‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏ô‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡∏ß‡πà‡∏≤‡πÑ‡∏´‡∏°,‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏•‡πà‡∏∞,‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏û‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ",
    "‡∏á‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢,‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞",
    "‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏à‡∏∞‡πÄ‡∏à‡∏≠‡∏≠‡∏∞‡πÑ‡∏£,‡∏à‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏±‡∏á‡πÄ‡∏™‡∏°‡∏≠",
    "‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á,‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏õ‡∏µ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏õ‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ö‡πâ‡∏≤‡∏á..."
  ];

  if ([0].includes(pageIndex)) {
    return (<AnimateMessage3 setBgIndex={setBgIndex} setPageIndex={setPageIndex} userName={username} />);
  }

  if ([1, 3, 5].includes(pageIndex)) {
    return (<TopPageMessage text={textList[pageIndex]} onClick={onClick} />);
  }

  if ([2].includes(pageIndex)) {
    return (
      <div className='questioncontainer-2'>
        <ThreeQuestionBox inputs={inputs} setInputs={setInputs} />
        <NextButton handleNextButton={onClick} />
      </div>
    )
  }
  if ([4].includes(pageIndex)) {
    return (
      <div className='questioncontainer'>
        <QuestionBox2 text={textList[pageIndex]} setAnswer={setAnswer} />
        <NextButton handleNextButton={onClick} />
      </div>
    )
  }

  if ([6].includes(pageIndex)) {
    return (
      <div className='questioncontainer'>
        <QuestionBox3 text={textList[pageIndex]} />
        <NextButton handleNextButton={onClick} />
      </div>
    )
  }

}

function FifthPage({ username, pageIndex, setPageIndex, onClick }) {
  const [repeat, setRepeat] = useState(false)
  useEffect(() => {
    if (pageIndex === 0 && !repeat) {
      const timer = setTimeout(() => {
        setPageIndex((prev) => prev + 1);
        setRepeat(true)
      }, 1000); // Delay of 1 second (1000 ms)
      return () => clearTimeout(timer); // Cleanup the timeout
    }
  }, [pageIndex]); // Depend on `currentText`
  const textList = [
    "",
    "‡πÄ‡∏≠‡∏≤‡∏•‡πà‡∏∞...,‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì " + username + ",‡∏•‡∏á‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà‡πÄ‡∏•‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
    "‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏à‡∏∞‡∏¢‡∏≤‡∏Å‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô,‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏±‡∏ô‡∏°‡∏≤‡πÑ‡∏î‡πâ...."

  ];
  if ([1, 2].includes(pageIndex)) {
    return (<TopPageMessage text={textList[pageIndex]} onClick={onClick} />);
  }
}

function SixthPage({ pageIndex, setPageIndex, onClick }) {
  useEffect(() => {
    if (pageIndex === 0) {
      const timer = setTimeout(() => {
        setPageIndex((prev) => prev + 1);
      }, 3000); // Delay of 1 second (1000 ms)
      return () => clearTimeout(timer); // Cleanup the timeout
    }
  }, [pageIndex]); // Depend on `currentText`
  const textList = [
    "",
    "‡∏à‡∏á‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á,‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏à‡∏∏‡∏î‡πÑ‡∏´‡∏ô,‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à,‡∏Ñ‡∏∏‡∏ì‡∏Å‡πá‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏î‡πâ‡∏ô‡∏∞",
    "‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡∏´‡∏ô‡πâ‡∏≤,‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡∏µ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏∞..."

  ];
  if ([1, 2].includes(pageIndex)) {
    return (<TopPageMessage3 text={textList[pageIndex]} onClick={onClick} />);
  }
}

function SeventhPage({ pageIndex, setPageIndex, userName, onClick, inputs, answer }) {

  const [title, setTitle] = useState('');
  const [text, setText] = useState('');
  const [url, setUrl] = useState('');
  const [file, setFile] = useState(null);

  const handleShare = async () => {
    const data = { title, text, url };

    if (file) {
      data.files = [file];
    }

    try {
      await navigator.share(data);
    } catch (e) {
      console.log('Share error:', e);
    }
  };

  const savePage = async () => {
    try {
      // Hide unwanted elements
      const savebuttons = document.querySelectorAll('.savePicture');
      const sharebutton = document.querySelectorAll('.ShareSite');
      savebuttons.forEach((button) => (button.style.visibility = 'hidden'));
      sharebutton.forEach((button) => (button.style.visibility = 'hidden'));

      // Capture the page
      const canvas = await html2canvas(document.body, {
        scrollX: 0,
        scrollY: -window.scrollY, // To capture the full page
        windowWidth: document.documentElement.scrollWidth,
        windowHeight: document.documentElement.scrollHeight,
      });

      // Restore hidden elements
      savebuttons.forEach((button) => (button.style.visibility = 'visible'));
      sharebutton.forEach((button) => (button.style.visibility = 'visible'));

      // Convert the canvas to an image URL
      const image = canvas.toDataURL('image/png');

      // Trigger download
      const link = document.createElement('a');
      link.href = image;
      link.download = 'page-screenshot.png';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error('Error saving page as image:', error);
    }
  };

  if ([0].includes(pageIndex)) {
    return (<AnimateMessage2 setPageIndex={setPageIndex} pageIndex={pageIndex} />);
  }
  if ([1].includes(pageIndex)) {
    const newUser = {
      username: userName,
      goals: inputs
    }
    addUser(newUser);

    return (
      <div className='FinalPage'>
        <div className='nato-sans-thai-bold'>
          ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏•‡∏∂‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏≤ BuildBiz
        </div>
        <div className='GiftBox' >
          <div style={{ "paddingTop": "3%" }} className='nato-sans-thai-bold'>
            "{userName}"
          </div>
          <div className='GiftMessage'>
            <div className='goal-box'>
              <div className='nato-sans-thai-bold'>
                ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏±‡∏ô‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà
              </div>
              <div className='Goals-3'>
                <span>1. {inputs[0]}</span>
                <span>2. {inputs[1]}</span>
                <span>3. {inputs[2]}</span>
              </div>
            </div>
            <div className='success-way'>
              <div className='nato-sans-thai-bold'>
                ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏π‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à <br />
              </div>
              <div className='answer'>
                {answer}
              </div>
            </div>
          </div>
          < div className='FinalQoute'>
            "‡πÄ‡∏£‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö ‡πÄ‡∏£‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î‡πÑ‡∏î‡πâ <br />
            ‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏´‡πâ‡πÑ‡∏î‡πâ ‡πÇ‡∏≠‡∏ö‡∏Å‡∏≠‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏™‡∏°‡∏≠ <br />
            ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡∏Å‡πá‡∏ï‡∏≤‡∏°..."
          </div>
        </div>
        <div></div>
        <button className='savePicture' onClick={savePage}>
          <img src={saveIcon} alt="save icon" className='saveIcon' />
          ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        </button>
        <button className='ShareSite' onClick={handleShare}>
          <img src={shareIcon} alt="save icon" className='saveIcon' />
          ‡∏™‡πà‡∏á‡πÄ‡∏ß‡πá‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡πà‡∏ô
        </button>
      </div>
    )
  }
}

function ChoiceBox1({ text, onClick }) {
  return (
    <div className="RatingBox">
      <div className='RatingText'>
        {text.split(",").map((line, index) => (
          <span key={index}>{line}</span>
        ))}
      </div>
      <div className='buttonList'>
        <TextButton text={"‡∏™‡∏ô‡∏∏‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏µ‡πÑ‡∏´‡∏ô‡πÜ‡πÄ‡∏•‡∏¢‡πÅ‡∏´‡∏•‡∏∞"} onClick={onClick} />
        <TextButton text={"‡∏Å‡πá‡∏™‡∏ô‡∏∏‡∏Å‡∏î‡∏µ‡∏ô‡∏∞ ‡πÑ‡∏î‡πâ‡πÄ‡∏à‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡∏°‡πà‡πÜ‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏•‡∏¢"} onClick={onClick} />
        <TextButton text={"‡πÄ‡∏â‡∏¢‡πÜ‡∏ô‡∏∞ ‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ô‡πà‡∏≤‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô‡πÄ‡∏•‡∏¢"} onClick={onClick} />
        <TextButton text={"‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏≠‡∏∞ ‡πÅ‡∏ï‡πà‡∏Å‡πá‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÑ‡∏î‡πâ"} onClick={onClick} />
        <TextButton text={"‡∏´‡∏ô‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏°‡∏≤‡∏Å ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏µ‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÑ‡∏ß ‡πÜ ‡∏à‡∏±‡∏á"} onClick={onClick} />
      </div>
    </div>
  )
}

function ChoiceBox2({ text, onClick }) {
  return (
    <div className="RatingBox-4">
      <div className='RatingText'>
        {text.split(",").map((line, index) => (
          <div key={index}>{line}</div>
        ))}
      </div>
      <div className='buttonList-2'>
        <TextButton2 text={"‡πÄ‡∏Ñ‡∏¢‡∏™‡∏¥ !"} onClick={onClick} />
        <TextButton2 text={"‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡∏Å‡πá‡∏°‡∏µ‡πÅ‡∏ß‡πà‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ö‡πâ‡∏≤‡∏á‡∏ô‡∏∞"} onClick={onClick} />
        <TextButton2 text={"‡∏≠‡∏î‡∏µ‡∏ï‡∏°‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß"} onClick={onClick} />
      </div>
    </div>
  )
}

// Main App Component
function App() {
  // States
  const [userName, setUserName] = useState("");
  const [pageIndex, setPageIndex] = useState(0);
  const [bgIndex, setBgIndex] = useState(0);
  const [secondPageText, setSecondPageText] = useState("‡∏Ñ‡∏∏‡∏ì‡∏•‡∏∑‡∏°‡∏ï‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏ö‡∏Å‡∏±‡∏ö, ‡∏™‡∏°‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏°‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡πÇ‡∏ï‡πä‡∏∞");
  const [zoom, setZoom] = useState(false)
  const [showComponent, setShowComponent] = useState(false);
  const [isFading, setIsFading] = useState(false);
  const [inputs, setInputs] = useState(["", "", ""])
  const [answer, setAnswer] = useState("")

  const backgroundImages = [
    backgroundImage1,
    backgroundImage2,
    backgroundImage3,
    backgroundImage4,
    backgroundImage5,
    backgroundImage6,
    backgroundImage7,
    backgroundImage8,
    backgroundImage9
  ];
  const currentBackgroundImage = backgroundImages[bgIndex];

  const goToPage = (page) => {
    if (isFading) return; // Prevent starting a new transition during an ongoing one
    setIsFading(true);
    setTimeout(() => {
      setBgIndex(page);
      setIsFading(false);
      setPageIndex(0)
      setZoom(false)
    }, 2000); // Match the transition duration in CSS
  };


  const handleFirstPageClick = () => {
    setPageIndex((prev) => (prev + 1))
    if (pageIndex === 2) {
      console.log("end bg 1")
      goToPage(1)
    }
  };

  const handleSecondPageClick = () => {
    setPageIndex((prev) => prev + 1);
    setSecondPageText("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏Å‡∏•‡πâ ‡πÉ‡∏Å‡∏•‡πâ ...");
    if (pageIndex === 1) {
      setZoom(true)
    }
    if (pageIndex === 3) {
      goToPage(2)
    }
  };

  const handleThirdPageClick = () => {
    if (pageIndex === 10) {
      console.log("end bg 2")
      goToPage(4)
    }
    setPageIndex((prev) => prev + 1);
  };

  const handleForthPageClick = () => {
    setPageIndex((prev) => prev + 1);
    if (pageIndex === 6) {
      setBgIndex(6)
      setPageIndex(0)
    }
  }

  const handleFifthPageClick = () => {
    if (pageIndex === 2) {
      goToPage(7)
      setPageIndex(0)
    } else {
      setPageIndex((prev) => prev + 1);
    }

  }

  const handleSixthPageClick = () => {
    setPageIndex((prev) => prev + 1);
    if (pageIndex === 2) {
      goToPage(8)
      setPageIndex(0)
    }
  }

  const handleSeventhPageClick = () => {
    setPageIndex((prev) => prev + 1);
  }

  const handleAnimationEnd = () => {
    setShowComponent(true)
  }

  // Effects
  useEffect(() => {
    console.log("Current Page Index:", pageIndex);
    console.log("current show component", showComponent);
    console.log("current BG Index", bgIndex);
    console.log("current zoom", zoom);

  }, [pageIndex, bgIndex, zoom, showComponent]);

  return (
    <div className={`overlay ${isFading ? "fade-out" : "fade-in"}`}>
      <div
        className={`App ${zoom ? "zoom-in" : null}`}
        style={{
          backgroundImage: `url(${currentBackgroundImage})`,
          backgroundPosition: 'center',
          backgroundRepeat: 'no-repeat',
          backgroundSize: 'cover',
        }}
        onAnimationEnd={handleAnimationEnd}
      >
        {(bgIndex === 0) && (
          <FirstPage pageIndex={pageIndex} onClick={handleFirstPageClick} setUserName={setUserName} />
        )}

        {bgIndex === 1 && (
          <div className='filter'>
            <SecondPage text={secondPageText} pageIndex={pageIndex} onClick={handleSecondPageClick} showComponent={showComponent} setShowComponent={setShowComponent} />
          </div>
        )}

        {[2, 3].includes(bgIndex) && (
          < ThirdPage pageIndex={pageIndex} onClick={handleThirdPageClick} userName={userName} setPageIndex={setPageIndex} setBgIndex={setBgIndex} />
        )}
        {
          [4, 5].includes(bgIndex) && (
            <ForthPage username={userName} pageIndex={pageIndex} onClick={handleForthPageClick} setPageIndex={setPageIndex} setBgIndex={setBgIndex} inputs={inputs} setInputs={setInputs} setAnswer={setAnswer} />
          )
        }
        {
          bgIndex === 6 && (
            <FifthPage username={userName} pageIndex={pageIndex} onClick={handleFifthPageClick} setPageIndex={setPageIndex} />
          )
        }
        {
          bgIndex === 7 && (
            <SixthPage setPageIndex={setPageIndex} pageIndex={pageIndex} onClick={handleSixthPageClick} />
          )
        }
        {
          bgIndex === 8 && (
            <SeventhPage userName={userName} pageIndex={pageIndex} onClick={handleSeventhPageClick} setPageIndex={setPageIndex} inputs={inputs} answer={answer} />
          )
        }
      </div>
    </div>
  );
}

export default App;
